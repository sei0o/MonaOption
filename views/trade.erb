<select id="pairs">
  <% @markets.each do |market| %>
    <option value="<%= market[:param] %>"><%= market[:from].upcase %> / <%= market[:to].upcase %></option>
  <% end %>
</select><br>
レート： <span id="rate">???.?</span><br>
<div id="flex_container">
  <div id="graph_cont">
    <div id="scale"></div>
    <div id="graph" style="height: 400px;" height="400" width="600"></div>
  </div>
  <div id="bet">
    <form action="/order" method="POST">
      <input type="number" name="amount">Mona<br>
      <input type="submit" name="type" value="high"><br>
      <input type="submit" name="type" value="low">
    </form>
  </div>
</div>
<script src="/javascript/libraries/flotr2/flotr2.min.js"></script>
<script>
  $(function(){
    var GraphVerticalSections = 10;
    
    var market = 1;
    var graphData; // 今までのレートを入れておく
    var nextJudge;
    var lastJudge
    
    getLastJudge();
    getNextJudge();
    untilNowRates();
    
    var marketReloadTimer = setInterval(function(){
      reloadExchange(function(data){
        drawGraph();
      })
    }, 1000);
    
    var checkJudgeTimer = setInterval(checkJudge, 1000);
    
    $("#pairs").change(changeMarket);
    $("#graph_cont").css("position", "relative");
    $("#scale").css("position", "absolute");
    
    function changeMarket(){
      market = $("#pairs").val();
      
      reloadExchange();
    }
    
    function reloadExchange(callback){
      $.get('/api/exchange/'+market, function(data){
        $("#rate").text(data["rate"]);
        graphData.push([data["time"], data["rate"]]);
        
        callback(data);
      })
    }
    
    function checkJudge(){
      // 判断時刻になっ(てい)たら
      if (new Date().getTime() >= nextJudge) {
        // 更新
        getNextJudge();
        getLastJudge();
      }
    }
    
    function untilNowRates(){
      $.get('/api/exchange/old/'+market, function(data){
        graphData = data;
      });
    }
    
    function getNextJudge(){
      $.get('/api/next_judge', function(data){
        nextJudge = data["next"];
        console.log(nextJudge);
      });
    }
    
    function getLastJudge(){
      $.get('/api/last_judge', function(data){
        lastJudge = data["last"];
        console.log(lastJudge);
      })
    }
   
    function adjustRange(){ // グラフの上下のpaddingを計算
      var rateMax = graphData.reduce(function(x, y){
        if (x[1] > y[1]) return x;
        return y;
      })[1];
      
      var rateMin = graphData.reduce(function(x, y){
        if (x[1] > y[1]) return y;
        return x;
      })[1];
      
      // レートの振幅の30%をそれぞれ上下paddingに
      var rateWidth = rateMax - rateMin;
      var padding = rateWidth / 100 * 30;
      
      return { paddedMax: rateMax + padding,
               paddedMin: rateMin - padding,
               max: rateMax,
               min: rateMin};
    }
   
    function drawGraph(){
      padded = adjustRange();
      console.log(lastJudge, nextJudge);
      Flotr.draw($('#graph').get(0), [graphData], {
        xaxis: {
          minorTickFreq: 4,
          mode: 'time',
          timeMode: 'local',
          timeUnit: 'second',
          min: lastJudge,
          max: nextJudge
        },
        yaxis: {
          min: padded.paddedMin,
          max: padded.paddedMax
        },
        grid: {
          minorVerticalLines: true
        }
      });
    }
  });
</script>