<select id="pairs">
  <% @markets.each do |market| %>
    <option value="<%= market[:id] %>"><%= market[:from].upcase %> / <%= market[:to].upcase %> : <%= market[:payout] %>倍</option>
  <% end %>
</select>
<div id="flex_container">
  <div id="graph_cont">
    締切まで: <span id="remain_deadline">00:00:00</span>　　　残り時間: <span id="remain">00:00:00</span>
    <div id="graph" style="height: 400px;" height="400" width="600"></div>
  </div>
  <div id="bet">
    <div id="rate">???.?</div>
    <form action="/order" method="POST">
      <div id="amount">
        <input type="text" name="amount" value="0.1"><span>Mona</span>
      </div>
      <input type="submit" name="direction" value="high">
      <input type="submit" name="direction" value="low">
      <input type="hidden" name="market_id" value="1">
      <input type="hidden" name="time" value="1">
    </form>
    <div id="status">入金額を入力して、HIGHまたはLOWを押してください。</div>
  </div>
</div>
<script src="/javascript/libraries/flotr2/flotr2.min.js"></script>
<script>
  $(function(){
    var GraphVerticalSections = 10;
    
    var market = 1;
    var graphData; // 今までのレートを入れておく
    var plotHighData = []; // 今までのHigh Orderを入れておく
    var plotLowData = []; // 今までのLow Orderを入れておく
    var nextJudge;
    var lastJudge;
    var nextDeadline;
    var graphBar = {
      data: [],
      color: '#ffbc66',
      lines: {
        lineWidth: 1,
      },
      mouse: {
        track: false,
      }
    };
    
    getLastJudge();
    getNextJudge();
    getNextDeadline();
    untilNowRates();
    
    var marketReloadTimer = setInterval(function(){
      reloadExchange(function(data){
        drawGraph();
      })
    }, 1000);
    
    var checkJudgeTimer = setInterval(checkJudge, 1000);
    
    var reloadRemainTimer = setInterval(reloadRemain, 1000);
    var reloadWalletTimer = setInterval(getWallet, 1000);
    
    $("#pairs").change(changeMarket);
    $("#graph_cont").css("position", "relative");
    $("#scale").css("position", "absolute");
    $("#bet > form").submit(function(event){
      event.preventDefault();
      
      var clicked = event.originalEvent.explicitOriginalTarget.attributes.getNamedItem("value").value;// クリックされたsubmitのvalueを取得(high/low)
      order(clicked);
    });
    
    function changeMarket(){
      market = $("#pairs").val();
      $("input[name='market_id']").val(market);
      
      // グラフ初期化
      plotHighData = [];
      plotLowData = [];
      untilNowRates();
      
      // orderを取得
      
    }
    
    function reloadExchange(callback){
      $.get('/api/exchange/'+market, function(data){
        $("#rate").text(data["rate"]);
        $("input[name='time']").val(data["time"]); // orderように時間を設定
        graphData.push([data["time"], data["rate"]]);
        
        callback(data);
      })
    }
    
    function reloadRemain(){ // 残り時間を更新
      var remainDeadline = (nextDeadline - new Date().getTime()/1000).toFixed(0);
      var remainJudge    = (nextJudge    - new Date().getTime()/1000).toFixed(0);
      
      remainDeadline = 0 > remainDeadline ? 0 : remainDeadline; // 0以下にならないように
      remainJudge    = 0 > remainJudge    ? 0 : remainJudge;
      
      // hh:mm:ssに変換
      $("#remain_deadline").text(("0" + Math.floor(remainDeadline / 3600     )).slice(-2) +":"+
                                 ("0" + Math.floor(remainDeadline % 3600 / 60)).slice(-2) +":"+
                                 ("0" + remainDeadline % 60).slice(-2));
      $("#remain").text(("0" + Math.floor(remainJudge / 3600     )).slice(-2) +":"+
                        ("0" + Math.floor(remainJudge % 3600 / 60)).slice(-2) +":"+
                        ("0" + remainJudge % 60).slice(-2));
    }
    
    function getWallet(){
      $.get("/api/wallet", function(data){
        $("#wallet").text(data["amount"] + " Mona");
      });
    }
    
    function checkJudge(){
      // 判断時刻になっ(てい)たら
      // 1000で割っているのはgetTimeがミリ秒を返すから
      if (new Date().getTime() / 1000 >= nextJudge) {
        console.log("judged");
        // 更新
        getNextJudge();
        getLastJudge();
        getNextDeadline();
        plotHighData = [];
        plotLowData = [];
        
        // いままで表示していたRatesを削除(もう表示されないので無駄
        // だしy軸自動paddingが効かなくなる)
        graphData = [];
      }
    }
    
    function untilNowRates(){
      $.get('/api/exchange/old/'+market, function(data){
        graphData = data;
        getOrders();
      });
    }
    
    function getNextJudge(){
      $.get('/api/next_judge', function(data){
        nextJudge = data["next"];
      });
    }
    
    function getLastJudge(){
      $.get('/api/last_judge', function(data){
        lastJudge = data["last"];
      })
    }
    
    function getNextDeadline(){
      $.get('/api/next_deadline', function(data){
        nextDeadline = data["next"];
        graphBar.data = [ nextDeadline, 0 ];
      });
    }
    
    function getOrders() {
      $.get('/api/orders/'+market, function(res){
        var orders = res["orders"];
        for(var i_o in orders){
          var order = orders[i_o];
          
          var rate = 0;
          for(var i in graphData){ // order.timeにおけるレートを取得
            var data = graphData[i];
            if (data[0] == order["time"]) {
              rate = data[1];
              break;
            }
          }
          if (order["direction"] == "high") {
            plotHighData.push([order["time"], rate]);
          }else{
            plotLowData.push([order["time"], rate]);
          }
          console.log(graphData[i]);
        }
        console.log(plotHighData, plotLowData);
      });
    }
   
    function adjustRange(){ // グラフの上下のpaddingを計算
      var rateMax = graphData.reduce(function(x, y){
        if (x[1] > y[1]) return x;
        return y;
      })[1];
      
      var rateMin = graphData.reduce(function(x, y){
        if (x[1] > y[1]) return y;
        return x;
      })[1];
      
      // レートの振幅の30%をそれぞれ上下paddingに
      var rateWidth = rateMax - rateMin;
      var padding = rateWidth / 100 * 30;
      
      return { paddedMax: rateMax + padding,
               paddedMin: rateMin - padding, };
    }
   
    function drawGraph(){
      padded = adjustRange();
      
      Flotr.draw($('#graph').get(0), [graphData, graphBar,
        {
          data: plotHighData,
          color: "#da3a45",
          points: {
            show: true,
            radius: 5
          },
        },
        {
          data: plotLowData,
          color: "#296cff",
          points: {
            show: true,
            radius: 5
          },
        }], {
        color: '#ccc',
        shadowSize: 0,
        xaxis: {
          minorTickFreq: 4,
          mode: 'time',
          timeMode: 'local',
          timeUnit: 'second',
          min: lastJudge,
          max: nextJudge
        },
        yaxis: {
          min: padded.paddedMin,
          max: padded.paddedMax
        },
        grid: {
          minorVerticalLines: true
        },
        mouse: {
          track: true,
          sensibility: 8,
          relative: true,
          // *1000するのはDateクラスが"ミリ"秒を受け取るから
          trackFormatter: function(obj){ return epochFormat(obj.x * 1000) +' / ' + obj.y; } 
        }
      });
    }
    
    function epochFormat(epoch){
      var date = new Date(epoch);
      return date.getHours() +":"+ date.getMinutes() +":"+ date.getSeconds();
    }
    
    function order(direction){ // direction: "high" or "low"
      var form = $("#bet > form");
      var buttons = form.find("input[type='submit']");
    
      console.log(direction);
      $.ajax({
        url: form.attr("action"),
        type: form.attr("method"),
        data: form.serialize() + '&direction=' + direction,
        timeout: 10000,
        beforeSend: function(xhr, setting){
          // ボタン無効化
          buttons.attr("disabled", true);
        },
        complete: function(xhr, status){
          // ボタン有効か
          buttons.attr("disabled", false);
          // 残金更新
          getWallet();
        },
        success: function(xhr, status){
          if (xhr["error"]) { // エラー
            $("#status").addClass("warning");
            $("#status").text(xhr["error"]);
            return;
          }
          $("#status").addClass("success");
          $("#status").text(xhr["success"]);
   
          // orderを保存
          // 今の時刻から一番近い->最後の graphDataの要素のレートを取得
          var latestRate = graphData[graphData.length - 1];
          direction == "high" ? plotHighData.push(latestRate) // high/low分けて保存（グラフplotのため)
                              : plotLowData.push(latestRate);
        },
      });
    }
  });
</script>